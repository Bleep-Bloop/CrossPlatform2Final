using System.Collections;
using System.Collections.Generic;
using System;
using UnityEngine;
using UnityEngine.InputSystem;

public class InputReader : MonoBehaviour, PlayerControls.IPlayerActions // InputReader must implement the interface that has been generated by Unity when we saved the .inputactions asset
{

    public Vector2 moveComposite;
    public Vector2 mouseDelta;

    public Action OnJumpPerformed;
    public Action OnShootPerformed;
    public Action OnChopPerformed;
    public Action OnKickPerformed;
    public Action OnAimPerformed;

    public Action OnHealthChanged;

    private PlayerControls playerControls;

    private void OnEnable()
    {
        if (playerControls != null)
            return;

        playerControls = new PlayerControls();
        playerControls.Player.SetCallbacks(this);
        playerControls.Enable();

    }

    public void OnDisable()
    {
        playerControls.Player.Disable();
    }

    // Whenever an input we bound for Move action (WASD and Left Thumbstick) is registered, this OnMove is called. Value is sent to context parameter. (Pressing W and A will be -1 on x, 1 on y).
    public void OnMove(InputAction.CallbackContext context)
    {
        moveComposite = context.ReadValue<Vector2>();
    }

    public void OnLook(InputAction.CallbackContext context)
    {
        mouseDelta = context.ReadValue<Vector2>();
    }


    public void OnJump(InputAction.CallbackContext context)
    {
        if (!context.performed)
            return;

        OnJumpPerformed?.Invoke();
    }

    public void OnFire(InputAction.CallbackContext context)
    {
        if (!context.performed)
            return;

        OnShootPerformed?.Invoke();
    }

    public void OnChop(InputAction.CallbackContext context)
    {
        if (!context.performed)
            return;

        OnChopPerformed?.Invoke();
    }

    public void OnKick(InputAction.CallbackContext context)
    {
        if (!context.performed)
            return;

        OnKickPerformed?.Invoke();
    }

    // ToDo: Make it so player only rotates when aiming
    public void OnAim(InputAction.CallbackContext context)
    {
        if (!context.performed)
            return;

        OnAimPerformed?.Invoke();

    }
    

}
